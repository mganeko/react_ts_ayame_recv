{"version":3,"sources":["video.tsx","index.tsx"],"names":["Video","props","elementRef","useRef","useEffect","stream","volumeValue","volume","current","srcObject","console","log","id","controls","className","ref","width","height","autoPlay","muted","playsInline","signalingKey","keyFromUrl","search","window","location","results","RegExp","exec","key","getKeyFromUrl","roomId","roomFromUrl","room","getRoomFromUrl","clientId","uuidv4","options","defaultOptions","App","localStream","remoteStream","conn","state","playing","connected","gotRemoteStream","videoCodec","connect","bind","disconnect","handleRoomChange","handleKeyChange","e","preventDefault","this","warn","AyameConnection","on","authzMetadata","handleDisconnect","a","setState","then","catch","err","error","target","value","type","onChange","disabled","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73442a9c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport './video.css';\n\n// ------ Video Component ------\ninterface VideoPropsInterface {\n  children: never[];\n  volume?: number;\n  stream: MediaStream | null;\n  id: string;\n  controls?: boolean;\n  width: string;\n  height: string;\n}\n\n\nfunction Video(props: VideoPropsInterface) {\n  const elementRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    const stream = props.stream;\n    let volumeValue = 0;\n    if (props.volume) {\n      volumeValue = props.volume;\n    }\n\n    const current: HTMLVideoElement | null = elementRef.current;\n    if (current != null) {\n      if (current.srcObject === stream) {\n        console.log('useEffect() same stream, so skip:', stream);\n      }\n      else {\n        current.srcObject = stream;\n        console.log('useEffect() set stream:', stream);\n      }\n\n      current.volume = volumeValue;\n    }\n    else {\n      console.log('useEffect() ref.current NULL');\n    }\n\n  });\n\n  console.log('Video rendering, id=%s', props.id);\n  const controls = props.controls;\n  if (controls) {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline controls ></video>\n    );\n  }\n  else {\n    return (\n      <video className=\"video_with_border\" ref={elementRef} id={props.id} width={props.width} height={props.height} autoPlay muted playsInline ></video>\n    );\n  }\n}\n\nexport default Video;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Video from './video'; // video.tsx\nimport { connection as AyameConnection, defaultOptions } from '@open-ayame/ayame-web-sdk';\nimport { v4 as uuidv4 } from 'uuid';\nimport { MouseEvent } from 'react';\n\nimport './index.css';\n\n// ---- TODO -----\n//  - DONE:roomID (DONE:input, DONE:url)\n//  - DONE: signalingKey (DONE:input, DONE:url)\n//  - DONE: codec (DONE:video, NO:audio)\n//  - DONE: button enable/disable control\n//  - DONE: github actions for deploy github pages\n//  - DONE: inline\n//  - DONE: volume\n//  - DONE: controls\n\n// ------ params -----\nconst signalingUrl = 'wss://ayame-labo.shiguredo.jp/signaling';\nlet signalingKey = '';\nconst keyFromUrl = getKeyFromUrl();\nif (keyFromUrl && (keyFromUrl !== '')) {\n  signalingKey = keyFromUrl;\n}\nlet roomId = 'mm-react-ayame-test';\nconst roomFromUrl = getRoomFromUrl();\nif (roomFromUrl && (roomFromUrl !== '')) {\n  roomId = roomFromUrl;\n}\n\nlet clientId = uuidv4(); // â‡¨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n//let videoCodec = null;\n//let audioCodec = null;\n//let signalingKey = null;\n\n// --- Ayame options ---\nconst options = defaultOptions;\nconsole.log('Ayame default options:', options);\noptions.clientId = clientId ? clientId : options.clientId;\nif (signalingKey) {\n  options.signalingKey = signalingKey;\n}\n\n// ---- URL ----\nfunction getRoomFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('room=([^&=]+)');\n  const results = re.exec(search);\n  let room = '';\n  if (results) {\n    room = results[1];\n  }\n  return room;\n}\n\nfunction getKeyFromUrl() {\n  const search = window.location.search;\n  const re = new RegExp('key=([^&=]+)');\n  const results = re.exec(search);\n  let key = null;\n  if (results) {\n    key = results[1];\n  }\n  return key;\n}\n\n// ------ App class ------\n// interface SoraAppPropsInterface {\n//   text?: string;\n// }\n\ninterface AyameAppStateInterface {\n  playing: boolean;\n  connected: boolean;\n  gotRemoteStream: boolean;\n  roomId: string;\n  signalingKey: string;\n  videoCodec: \"H264\" | \"VP8\" | \"VP9\" | undefined; //VideoCodecOption; //VideoCodecType;\n  //remoteStreams: { [key: string]: MediaStream; }\n}\n\nclass App extends React.Component {\n  localStream: MediaStream | null;\n  remoteStream: MediaStream | null;\n  conn: any;\n  state: AyameAppStateInterface;\n\n  constructor(props: object) {\n    super(props);\n    this.localStream = null;\n    this.state = {\n      playing: false,\n      connected: false,\n      gotRemoteStream: false,\n      roomId: roomId,\n      signalingKey: signalingKey,\n      videoCodec: 'H264',\n    };\n\n    // This binding is necessary to make `this` work in the callback\n    //this.startVideoHandler = this.startVideoHandler.bind(this);\n    //this.stopVideoHandler = this.stopVideoHandler.bind(this);\n    //this.stopVideo = this.stopVideo.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.handleRoomChange = this.handleRoomChange.bind(this);\n    this.handleKeyChange = this.handleKeyChange.bind(this);\n    //this.handleCodecChange = this.handleCodecChange.bind(this);\n\n    // -- Ayame connection --\n    this.conn = null;\n    this.remoteStream = null;\n  }\n\n  componentDidMount() {\n    console.log('App DidMound()');\n  }\n\n  componentWillUnmount() {\n    console.log('App WillUnmount()');\n    // if (this.localStream) {\n    //   this.stopVideo();\n    // }\n  }\n\n  // -----------\n\n  // startVideoHandler(e: MouseEvent<HTMLButtonElement>) {\n  //   e.preventDefault();\n  //   console.log('start Video');\n  //   if (this.localStream) {\n  //     console.warn('localVideo ALREADY started');\n  //     return;\n  //   }\n\n  //   const constraints = { video: true, audio: true };\n  //   navigator.mediaDevices.getUserMedia(constraints)\n  //     .then(stream => {\n  //       this.localStream = stream;\n  //       this.setState({ playing: true });\n  //     })\n  //     .catch(err => console.error('media ERROR:', err));\n  // }\n\n  // stopVideoHandler(e: MouseEvent<HTMLButtonElement>) {\n  //   e.preventDefault();\n  //   console.log('stop Video');\n  //   this.stopVideo();\n  // }\n\n  // stopVideo() {\n  //   if (this.localStream) {\n  //     this.localStream.getTracks().forEach(track => track.stop());\n  //     this.localStream = null;\n  //     this.setState({ playing: false });\n  //   }\n  // }\n\n  // -----------------\n  connect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('connect');\n\n    if (this.conn) {\n      console.warn('ALREADY connected');\n      return;\n    }\n\n    if (this.state.signalingKey && (this.state.signalingKey !== '')) {\n      options.signalingKey = this.state.signalingKey;\n    }\n\n    // -- recvonly, so DO NOT specify codec --\n    //options.video.codec = this.state.videoCodec;\n\n    // (signalingUrl: string, roomId: string, options: ConnectionOptions, debug: boolean, isRelay: boolean)\n    console.log('connecting roomId=%s key=%s', this.state.roomId, options.signalingKey);\n    console.log('Ayame connect options:', options);\n    this.conn = AyameConnection(signalingUrl, this.state.roomId, options);\n    this.conn.on('open', (e: any) => console.log('auth:', e.authzMetadata));\n    this.conn.on('disconnect', (e: any) => {\n      console.log('disconnected:', e);\n      this.handleDisconnect();\n    });\n    this.conn.on('addstream', async (e: MediaStreamEvent) => {\n      console.log(e.stream);\n      this.remoteStream = e.stream;\n      this.setState({ gotRemoteStream: true });\n    });\n    this.conn.on('removestream', async (e: MediaStreamEvent) => {\n      console.log('removestream:', e);\n      this.remoteStream = null;\n      this.setState({ gotRemoteStream: false });\n    });\n    this.conn.connect(this.localStream)\n      .then(() => {\n        console.log('connected');\n        this.setState({ connected: true });\n      })\n      .catch((err: Error) => { console.error('connect ERROR:', err) });\n  }\n\n  disconnect(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    console.log('disconnect');\n    this.handleDisconnect();\n  }\n\n  handleDisconnect() {\n    if (this.conn) {\n      this.conn.disconnect();\n      this.conn = null;\n    }\n\n    this.remoteStream = null;\n    this.setState({ connected: false, gotRemoteStream: false });\n  }\n\n  handleRoomChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ roomId: e.target.value });\n  }\n\n  handleKeyChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ signalingKey: e.target.value });\n  }\n\n  // handleCodecChange(e: React.ChangeEvent<HTMLSelectElement>) {\n  //   this.setState({ videoCodec: e.target.value });\n  // }\n\n  // -----------------\n  render() {\n    console.log('App render()');\n    return (\n      <div className=\"App\" >\n        React-TS Ayame-Labo RecvOnly<br />\n        {\n          /*\n          Video Codec:\n          <select value={this.state.videoCodec} onChange={this.handleCodecChange} disabled={this.state.connected} >\n            <option value=\"VP8\">VP8</option>\n            <option value=\"VP9\">VP9</option>\n            <option value=\"H264\">H264</option>\n          </select>\n          &nbsp;\n          <button onClick={this.startVideoHandler} disabled={this.state.playing || this.state.connected}> Start Video</button >\n          <button onClick={this.stopVideoHandler} disabled={!this.state.playing || this.state.connected}>Stop Video</button>\n          <br />\n          */\n        }\n        SignalingKey: <input id=\"signaling_key\" type=\"text\" value={this.state.signalingKey} onChange={this.handleKeyChange} disabled={this.state.connected}></input>\n        <br />\n        Room: <input id=\"room_id\" type=\"text\" value={this.state.roomId} onChange={this.handleRoomChange} disabled={this.state.connected}></input>\n        <button onClick={this.connect} disabled={this.state.connected}> Connect</button >\n        <button onClick={this.disconnect} disabled={!this.state.connected}>Disconnect</button>\n        <div className=\"VideoContainer\">\n          {\n            /*\n            <Video id={\"local_video\"} width={\"160px\"} height={\"120px\"} stream={this.localStream}>\n            </Video>\n            */\n          }\n          <div className=\"RemoteContainer\">\n            <Video id={\"remote_video\"} width={\"320px\"} height={\"240px\"} volume={0.5} controls={true} stream={this.remoteStream}>\n            </Video>\n          </div>\n        </div>\n      </div >\n    );\n  }\n}\n\n// ====================== ReactDOM rendering ====================\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}